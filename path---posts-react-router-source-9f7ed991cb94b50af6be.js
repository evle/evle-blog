webpackJsonp([0xb76d332d8ed5],{422:function(n,s){n.exports={data:{site:{siteMetadata:{title:"EVLE",subtitle:"Knowledge is not consumed, it is shared",copyright:"© All rights reserved.",author:{name:"evle",twitter:"#"},disqusShortname:"",url:"https://evle.netlify.com"}},markdownRemark:{id:"/Users/evle/blog/src/pages/articles/2019-05-07---react-router-source/index.md absPath of file >>> MarkdownRemark",html:'<h2>介绍</h2>\n<p>React Router 的实现依赖于一个操作 HTML5 histroy API 的库 <code class="language-text">history</code>, 每个路由组件都会创建一个<code class="language-text">history</code>对象来追踪当前的地址 \b(history.location)并且之前的地址会保存在 history stack 中, 当前 URL 发生改变时, 视图会重新渲染。当点击<code class="language-text">&lt;Link&gt;</code>组件, React Router 会调用<code class="language-text">history.push()</code>改变 URL, 当点击<code class="language-text">&lt;Redirect&gt;</code>组件时, React Router 会调用<code class="language-text">history.replace()</code>来替换当前 history state。</p>\n<h2>前置知识</h2>\n<p>在以前没有 Histroy API 之前, 更该 URL 有 2 种方式, 一种是能通过<code class="language-text">window.location</code>更改, 但缺点很明显是会重新加载页面, 另一种是通过<code class="language-text">hash</code>比如<code class="language-text">&lt;a href=&quot;#home&quot;&gt;Home&lt;/a&gt;</code>这样的方式。HTML5 History API 提供给我们操作历史浏览的权限, 通过 <code class="language-text">window.history.length</code> 总共记录了几个页面:</p>\n<p>如果从 A 页面跳转到 B 页面再跳转到 C 页面, 那么<code class="language-text">window.history.length</code>就是 <code class="language-text">3</code>, 可以通过 <code class="language-text">history.back()</code> 和 <code class="language-text">history.forward()</code> 在这 3 个页面回来切换。我们还可以通过更简便的方法来切换页面就是使用<code class="language-text">history.go()</code>, 如果参数为正数就是向前, 如果是负数就是返回 \b。\b 简单来说就是:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">history.back<span class="token punctuation">(</span><span class="token punctuation">)</span>\nhistory.back<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n// 等价于\n\nhistory.go<span class="token punctuation">(</span>-2<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>除了历史页面的切换外, History API 还赋予我们增加和修改<strong>history entires</strong>的能力, 提供了<code class="language-text">history.pushState()</code>和<code class="language-text">history.replaceState()</code>方法。2个方法的区别是: <strong>pushState是push到history stack, 会使得History.length加1, 而replaceState是替换当前的这条会话历史, 因此不会增加History.length</strong> 我们可以通过</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'home\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>来切换到一个新的 history entry, 比如我们当前的网站是 <code class="language-text">https://www.xx.com</code> 那么执行上面语句后我们地址就会成为 <code class="language-text">https://www.xx.com/home</code>, 并且可以通过 <code class="language-text">histroy.state</code>得到我们之前保存的对象<code class="language-text">{data: 123}</code>, 需要注意的是: <strong>通过这样的方法改变 URL, 不会使页面发生跳转, 这也是 React Router 实现路由的关键</strong> , 那我们怎么监听URL的变动呢? 可以通过监听<code class="language-text">popstate</code>实现</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'popstate\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"location: "</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>location <span class="token operator">+</span> <span class="token string">", state: "</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>但只有调用<code class="language-text">back()</code>, <code class="language-text">forward()</code>和<code class="language-text">go()</code>的时候会触发该回调,它们都会重载页面, 我们通过<code class="language-text">pushState</code>和<code class="language-text">replaceState</code>改变页面URL的时候, 该监听<strong>不生效</strong>, 因此我们需要重写这两个方法</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">_wr</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 抽象接口 易于使用</span>\n   <span class="token keyword">var</span> orig <span class="token operator">=</span> history<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>\n   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token comment">// 调用方法本身</span>\n       <span class="token keyword">var</span> rv <span class="token operator">=</span> <span class="token function">orig</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// 创建事件 然后dispatch</span>\n      <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n       e<span class="token punctuation">.</span>arguments <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n       window<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token keyword">return</span> rv<span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nhistory<span class="token punctuation">.</span>pushState <span class="token operator">=</span> <span class="token function">_wr</span><span class="token punctuation">(</span><span class="token string">\'pushState\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nhistory<span class="token punctuation">.</span>replaceState <span class="token operator">=</span> <span class="token function">_wr</span><span class="token punctuation">(</span><span class="token string">\'replaceState\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>改写这两个方法后, 那么让我们实现一个简单的监听页面变动更新页面：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> page <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'main\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'pushState\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  page<span class="token punctuation">.</span>textContent <span class="token operator">=</span> history<span class="token punctuation">.</span>state <span class="token operator">&amp;&amp;</span> history<span class="token punctuation">.</span>state<span class="token punctuation">.</span>page\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> links <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlinks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">link</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">\'content\'</span><span class="token punctuation">)</span>\n    history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      page<span class="token punctuation">:</span> content\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>效果如下</p>\n<p><img src="https://s2.ax1x.com/2019/05/08/Eyxufe.gif" alt="Eyxufe.gif"></p>\n<p>我们可以将其封装成一个类使它更加易于使用和维护</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Routers</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// 在初始化时监听popstate事件</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_bindPopState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 初始化路由</span>\n  <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span> path<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 将路径和对应回调函数加入hashMap储存</span>\n  <span class="token function">route</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> callback <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 触发路由对应回调</span>\n  <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span> path<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 后退</span>\n  <span class="token function">backOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 监听popstate事件</span>\n  <span class="token function">_bindPopState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'popstate\'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> path <span class="token operator">=</span> e<span class="token punctuation">.</span>state <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>state<span class="token punctuation">.</span>path<span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>有了基础铺垫下一步让我们来看下React Router是如何实现的</p>\n<h2>React Router实现</h2>\n<p>React提供的2种路由<code class="language-text">&lt;BrowserRouter&gt;</code>和<code class="language-text">&lt;HashRouter&gt;</code>分别对应我们之前讨论过的history API实现和hash实现(历史遗留), 在开发React应用时我们普遍使用<code class="language-text">&lt;BrowserRouter&gt;</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>\n        <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span>\n    <span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">&lt;BrowserRouter&gt;</code>创建了一个history实例, 加载了<code class="language-text">Router</code>组件并将history实例和<code class="language-text">&lt;App/&gt;</code>组件作为参数。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">BrowserRouter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  history <span class="token operator">=</span> <span class="token function">createHistory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Router history<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>history<span class="token punctuation">}</span> children<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>在<code class="language-text">Router</code>组件中, 调用了history实例的<code class="language-text">listen</code>方法来监听URL的变动, 当有变动时, 设置<code class="language-text">match</code>的状态。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>unlisten <span class="token operator">=</span> history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    match<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">computeMatch</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>当<code class="language-text">Router</code>更新了<code class="language-text">state</code>, 那么<code class="language-text">Route</code>组件的<code class="language-text">componentWillReceiveProps</code>中会接收到改动过的URL地址, 如果匹配的话则设置<code class="language-text">this.state.match</code>为<code class="language-text">true</code>, 然后开始<code class="language-text">render</code>流程</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> match <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span> <span class="token comment">// 布尔值，表示 location 是否匹配当前 Route 的 path</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> children<span class="token punctuation">,</span> component<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span> <span class="token comment">// Route 提供的三种可选的渲染方式</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> route<span class="token punctuation">,</span> staticContext <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>router<span class="token punctuation">;</span> <span class="token comment">// Router 传入的 context</span>\n  <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location <span class="token operator">||</span> route<span class="token punctuation">.</span>location<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span> match<span class="token punctuation">,</span> location<span class="token punctuation">,</span> history<span class="token punctuation">,</span> staticContext <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token keyword">return</span> match <span class="token operator">?</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Component 创建</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>render<span class="token punctuation">)</span> <span class="token keyword">return</span> match <span class="token operator">?</span> <span class="token function">render</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// render 创建</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> children <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">children</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回调 children 创建</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isEmptyChildren</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 普通 children 创建</span>\n    <span class="token keyword">return</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>可以看到render有多种渲染组件的方式, 如果我们给Route设置的是一个component比如<code class="language-text">&lt;Route path=&#39;/product&#39; component={Product} /&gt;</code>那么当URL变动为<code class="language-text">/product</code>匹配成功时则会设置<code class="language-text">match</code>为<code class="language-text">true</code>, 然后调用<code class="language-text">React.createElement</code>渲染组件。流程大致如下：</p>\n<p><img src="https://s2.ax1x.com/2019/05/08/EcMu7V.png" alt="EcMu7V.png"></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Switch<span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">\'/product\'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Product<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">\'/about\'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span></code></pre>\n      </div>\n<p>React Router中的<code class="language-text">&lt;Link&gt;</code>就很像<code class="language-text">&lt;a href=&quot;/anywhere&quot;&gt;</code>标签一样, 点击了会跳转到<code class="language-text">href</code>指定的链接,但SPA应用不刷新应用怎么做呢? 从前面的基础知识我们可以猜到我们要做的就是防止a标签的默认行为, 监听到a的点击事件后用history API来实现页面的跳转。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/product"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre>\n      </div>\n<p>下面让我们看下React Router是如何实现它的：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> replace<span class="token punctuation">,</span> to<span class="token punctuation">,</span> innerRef<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n     <span class="token keyword">const</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>router<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> location <span class="token operator">=</span>\n      <span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">"string"</span>\n        <span class="token operator">?</span> <span class="token function">createLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> history<span class="token punctuation">.</span>location<span class="token punctuation">)</span>\n        <span class="token punctuation">:</span> to<span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> href <span class="token operator">=</span> history<span class="token punctuation">.</span><span class="token function">createHref</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token punctuation">{</span><span class="token comment">/* 这里是href是为了HTML语义化,没有生效 因为在handleClick中会禁止跳转行为 */</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>a <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span> href<span class="token operator">=</span><span class="token punctuation">{</span>href<span class="token punctuation">}</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>innerRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      <span class="token operator">!</span>event<span class="token punctuation">.</span>defaultPrevented <span class="token operator">&amp;&amp;</span> <span class="token comment">// onClick prevented default</span>\n      event<span class="token punctuation">.</span>button <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// ignore everything but left clicks</span>\n      <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> <span class="token comment">// let browser handle "target=_blank" etc.</span>\n      <span class="token operator">!</span><span class="token function">isModifiedEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token comment">// ignore clicks with modifier keys</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 阻止a\b标签的默认行为</span>\n      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>router<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> replace<span class="token punctuation">,</span> to <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        history<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 改变页面的URL</span>\n        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>在点击了<code class="language-text">Link</code>标签后内部只是调用了<code class="language-text">history.push</code>或者<code class="language-text">history.replace</code>来改变URL, 当页面URL改变后, 则通过我们讨论的流程进行匹配并且render组件。</p>\n<p>最后让我们看下<code class="language-text">withRouter()</code>， 该函数的作用是: 在不是通过路由切换过来的组件中(也就是this.props.history是undefined)，将react-router 的 history、location、match 三个对象传入props对象上。它的实现也非常简单\b, 使用context来传递history, location, match对象。 React Router V4使用的Context是最新用法, 和<strong>React的基础回顾</strong>一文中的context用法有很大的差别, 先让我们看下新版本的Context是如何使用来共享状态的。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 1. 创建状态</span>\n<span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">\'light\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2. 将Context从根组件向下传递</span>\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 共享主题颜色 dark</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"dark"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>Toolbar <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//中间组件，并不关心和他无关的参数 无需逐级传递props</span>\n<span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span>ThemedButton <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//使用参数的组件</span>\n<span class="token keyword">function</span> <span class="token function">ThemedButton</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用Consumer组件包裹需要获取参数的组件 theme就是dark</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>\n      <span class="token punctuation">{</span><span class="token parameter">theme</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>Button <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> theme<span class="token operator">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>有了上面的基础我们再来看withRouter的实现就很简单了:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">withRouter</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 传进来组件 Component</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">C</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> wrappedComponentRef<span class="token punctuation">,</span> <span class="token operator">...</span>remainingProps <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>RouterContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>\n        <span class="token punctuation">{</span><span class="token parameter">context</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">(</span>\n           <span class="token punctuation">{</span><span class="token comment">/* 使用Consumer获取Context并且传递给传进来的组件 */</span><span class="token punctuation">}</span>\n            <span class="token operator">&lt;</span>Component\n              <span class="token punctuation">{</span><span class="token operator">...</span>remainingProps<span class="token punctuation">}</span>\n              <span class="token punctuation">{</span><span class="token operator">...</span>context<span class="token punctuation">}</span>\n              ref<span class="token operator">=</span><span class="token punctuation">{</span>wrappedComponentRef<span class="token punctuation">}</span>\n            <span class="token operator">/</span><span class="token operator">></span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>RouterContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2>总结</h2>\n<p>通过本篇的分析我们了解React Router的本质就是做了两件事情: 改变URL和 根据当前的URL渲染组件。让我们来回顾下它如何完成这两件事情的</p>\n<ol>\n<li><Router>的<code class="language-text">componentWillMount</code>中使用<code class="language-text">history.listen</code>监听整个应用URL的变化</li>\n<li>点击<Link>调用<code class="language-text">history.push</code>更改URL</li>\n<li>Router监听到URL的变化去修改state, 修改state触发Route的<code class="language-text">componentWillReceiveProps</code>接收到新的URL地址, 比较新的URL地址和自身的path是否匹配, 如果匹配就渲染。</li>\n</ol>',
fields:{tagSlugs:["/tags/react/"]},frontmatter:{title:"React Router源码分析及实现",tags:["React"],date:"2019-05-07",description:""},excerpt:"介绍 React Router 的实现依赖于一个操作 HTML5 histroy API 的库  , 每个路由组件都会创建一个 对象来追踪当前的地址 \b(history.location)并且之前的地址会保存在 history stack 中, 当前 URL…"}},pathContext:{slug:"/posts/react-router-source"}}}});
//# sourceMappingURL=path---posts-react-router-source-9f7ed991cb94b50af6be.js.map