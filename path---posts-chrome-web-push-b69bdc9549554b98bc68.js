webpackJsonp([0xe678e2321003],{415:function(n,s){n.exports={data:{site:{siteMetadata:{title:"EVLE",subtitle:"Knowledge is not consumed, it is shared",copyright:"© All rights reserved.",author:{name:"evle",twitter:"#"},disqusShortname:"",url:"https://evle.netlify.com"}},markdownRemark:{id:"/Users/evle/blog/src/pages/articles/2019-04-13---chrome-web-push/index.md absPath of file >>> MarkdownRemark",html:'<h2>介绍\b</h2>\n<p>推送类型的广告作为一种新型的广告形式已经兴起很久了, \b通过适(欺)当(骗)的\b\b\b文案相比传统Banner广告有着不可思议的转化率。\b用户很乐意去点击感兴趣的推送而进入我们想让他进入的网站。HTTP Web Push协议中描述\bWeb推送服务的架构如下</p>\n<p><a href="https://imgchr.com/i/E9aiMq"><img src="https://s2.ax1x.com/2019/04/19/E9aiMq.md.png" alt="E9aiMq.md.png"></a></p>\n<p>在这个架构中我们看可以看到有3个参与者</p>\n<ul>\n<li>UA</li>\n<li>Push Service</li>\n<li>App Server</li>\n</ul>\n<p><strong>UA</strong> 则代表客户端, 客户端发送订阅请求给 <strong>Push Service</strong>， Push Service代表第三方的推送服务比如Google的FCM服务。<strong>App Server</strong>也就是Server端应用。下面让我们详细的分析图中的每一个过程。</p>\n<h2>推送流程</h2>\n<p>在客户端实现推送需要借助浏览器的Service Worker, 向Push Service发送请求以及接受来自Push Service的推送事件我们都需要调用Service Worker的API, 我们需要使用<code class="language-text">navigator.serviceWorker.register(&#39;sw.js&#39;)</code>注册\b一个service worker, <code class="language-text">sw.js</code>也就是一个JS文件, 里面控制了该worker如何工作。\b当我们调用这个API注册了一个worker后浏览器会做以下三件事情：</p>\n<ol>\n<li>下载sw.js</li>\n<li>运行sw.js中的代码</li>\n<li>返回一个Promise对象(代码运行正常返回resolve,如果异常返回reject)</li>\n</ol>\n<p>如果要实现Server端对Client进行消息推送, 要先从Client开始经历一下3个过程。\n<a href="https://imgchr.com/i/E9wyGQ"><img src="https://s2.ax1x.com/2019/04/19/E9wyGQ.md.png" alt="E9wyGQ.md.png"></a></p>\n<p>第一步是<code class="language-text">Get Permission to Send Push Message</code>, 也就是首先让浏览器允许接受这个域名的推送服务，我们需要调用<code class="language-text">Notification.requestPermission()</code>让浏览器弹出一个通知框，提示是否允许推送，并由用户进行选择。默认情况下该值是<code class="language-text">default</code>会弹出通知框让用户选择, 但如果是<code class="language-text">grante</code>或<code class="language-text">denied</code>则不会弹出通知框。</p>\n<p>当用户选择允许后, 就可以进行第二步 <code class="language-text">Get PushSubscription</code>, 从开篇介绍中的架构图中，我们可以看到浏览器向Push Service发出subscribe请求,这就是第二步做的事情。通过调用<code class="language-text">registration.pushManager.subscribe(options)</code>向Push Service发送订阅请求</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> Options <span class="token operator">=</span> <span class="token punctuation">{</span>\n      applicationServerKey<span class="token punctuation">:</span> <span class="token function">urlBase64ToUint8Array</span><span class="token punctuation">(</span>\n        <span class="token string">\'BEl62iUYgUivxIkv69yViEuiBIa-Ib9-SkvMeAtA3LFgDzkrxZJjSgSnfckjBJuBkr3qBUYIHBQFLXYp5Nksh8U\'</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\nregistration<span class="token punctuation">.</span>pushManager<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Options<span class="token punctuation">)</span></code></pre>\n      </div>\n<p><code class="language-text">Options</code>中的<code class="language-text">applicationServerKey</code>是由 VAPID spec标准定义的一个规范\b所生成的public key, 我们可以用<code class="language-text">web-push</code>生成public和private key，把public key放在上面的<code class="language-text">applicationServerKey</code>中。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> webpush <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'web-push\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> vapidKeys <span class="token operator">=</span> webpush<span class="token punctuation">.</span><span class="token function">generateVAPIDKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>VAPID标准规定我们要发送一个<code class="language-text">Uint8Array</code>格式的pubilc key到Push Service，所以我们需要使用<code class="language-text">urlBase64ToUint8Array</code>转换一下我们上面生成的public key.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">urlBase64ToUint8Array</span><span class="token punctuation">(</span><span class="token parameter">base64String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> padding <span class="token operator">=</span> <span class="token string">\'=\'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> base64String<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> base64 <span class="token operator">=</span> <span class="token punctuation">(</span>base64String <span class="token operator">+</span> padding<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-/g</span><span class="token punctuation">,</span> <span class="token string">\'+\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/_/g</span><span class="token punctuation">,</span> <span class="token string">\'/\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> rawData <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> outputArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>rawData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rawData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    outputArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rawData<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> outputArray<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>当我们调用<code class="language-text">registration.pushManager.subscribe(options)</code>后，浏览器会把这个public key发送给\b Push Service, Push Service会用这个public key生成一个 <strong>endpoint</strong> 并返回给浏览器。\b\b浏览器会得到以下格式的对象称为<code class="language-text">PushSubscription</code>。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>\n  <span class="token string">"endpoint"</span><span class="token punctuation">:</span> <span class="token string">"https://random-push-service.com/some-kind-of-unique-id-1234/v2/"</span><span class="token punctuation">,</span>\n  <span class="token string">"keys"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"p256dh"</span> <span class="token punctuation">:</span>\n<span class="token string">"BNcRdreALRFXTkOOUHK1EtK2wtaz5Ry4YfYCA_0QTpQtUbVlUls0VJXg7A8u-Ts1XbjhazAkj7I99e8QcYP7DkM="</span><span class="token punctuation">,</span>\n    <span class="token string">"auth"</span>   <span class="token punctuation">:</span> <span class="token string">"tBHItJI5svbpez7KI4CCXg=="</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>这个<strong>PushSubscription</strong>相当于该浏览器ID, \b第三步我们需要将这个ID发送至我们的后端应用\b保存起来, 以后我们需要将推送内容发送给这个ID来实现推送功能。在保存该信息时我们应该附带保存一些当前浏览器的信息比如UA、Platform等其他信息以便于在后端统计以及分类。</p>\n<p>当后端应用收到这个 <strong>PushSubscription</strong> 后就可以任意时候给客户端推送消息了。具体流程如下：</p>\n<p><a href="https://imgchr.com/i/E9gHzT"><img src="https://s2.ax1x.com/2019/04/19/E9gHzT.md.png" alt="E9gHzT.md.png"></a></p>\n<p>后端实现推送我们依旧可以使用刚才生成VAPID的<code class="language-text">web-push</code>库，使用这个库实现推送我们只需要依次调用这个方法<code class="language-text">setGCMAPIKey</code>, <code class="language-text">setVapidDetails</code>和<code class="language-text">sendNotification</code>。</p>\n<p><code class="language-text">setGCMAPIKey</code>就是把在第三方推送服务比如FCM申请到的API Key保存起来</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> gcmAPIKey <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n<span class="token class-name">WebPushLib</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setGCMAPIKey</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">apiKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>apiKey <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gcmAPIKey <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  gcmAPIKey <span class="token operator">=</span> apiKey<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">setVapidDetails</code>的作用是在推送消息给浏览器之前对public key和private key的格式进行验证</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token class-name">WebPushLib</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setVapidDetails</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">subject<span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> privateKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    vapidHelper<span class="token punctuation">.</span><span class="token function">validateSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    vapidHelper<span class="token punctuation">.</span><span class="token function">validatePublicKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    vapidHelper<span class="token punctuation">.</span><span class="token function">validatePrivateKey</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><code class="language-text">sendNotification</code>是将这个请求发送出去，发送的第一步正如上图中第一步将签名信息包括private key加在请求的<code class="language-text">header</code>中\b\b，其中重要的方法是<code class="language-text">generateRequestDetails</code>将\b签名信息放在header里面</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> requestDetails <span class="token operator">=</span> <span class="token punctuation">{</span>\n      method<span class="token punctuation">:</span> <span class="token string">\'POST\'</span><span class="token punctuation">,</span>\n      headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token constant">TTL</span><span class="token punctuation">:</span> timeToLive\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\nrequestDetails<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">\'Content-Length\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> encrypted<span class="token punctuation">.</span>cipherText<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\nrequestDetails<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">\'Content-Type\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">\'application/octet-stream\'</span><span class="token punctuation">;</span>\nrequestDetails<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">\'Content-Encoding\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">AES_GCM</span><span class="token punctuation">;</span>\nrequestDetails<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">\'Crypto-Key\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">KEY</span><span class="token punctuation">;</span>\nrequestDetails<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token string">\'key=\'</span> <span class="token operator">+</span> <span class="token constant">KEY</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>设置完header头之后，该方法最后调用Nodejs原生API <code class="language-text">https.request</code> 给<code class="language-text">PushSubscription</code>中的<code class="language-text">endpoint</code>发送POST请求\b，也就是完成了上图流程中的第二步。</p>\n<p>第三步就是Push Service要处理的事情了， Push Service会收到private key\b并且来找与它匹配的public key, 找到后会回应后端应用推送成功并且将推送内容发送至浏览器。</p>\n<p>因为浏览器中有我们之前注册的service worker, service worker会收到<code class="language-text">push</code>事件, 但是我们无法控制servie worker的代码何时运行，因为是浏览器决定它什么时候唤醒, 什么时候终止, 因此我们需要将一个Promise对象传递给<code class="language-text">event.waitUntil()</code>来保持service worker一直运行，直到Promise被<code class="language-text">resolve</code>。此外我们通常在浏览器收到推送时，将浏览器收到推送的事件上报给服务器，那么我们可以将上报给服务器的代码也封装成一个Promise, 用<code class="language-text">Promise.all</code>处理后在传递给<code class="language-text">event.waitUntil()</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'push\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> analyticsPromise <span class="token operator">=</span> <span class="token function">pushReceivedTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> pushInfoPromise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/api/get-more-data\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> title <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>userName <span class="token operator">+</span> <span class="token string">\' says...\'</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> message <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> self<span class="token punctuation">.</span>registration<span class="token punctuation">.</span><span class="token function">showNotification</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        body<span class="token punctuation">:</span> message\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> promiseChain <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    analyticsPromise<span class="token punctuation">,</span>\n    pushInfoPromise\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>promiseChain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>这里要注意的是必须在Promise中<strong>return</strong> <code class="language-text">self.registration.showNotification</code>。 我们收到该事件后需要调用<code class="language-text">self.registration.showNotification</code>来展示服务器推送的内容。服务器推送的内容包含下面这样一个对象来用展示内容, 通常我们在开发中需要配置一个素材服务器来管理给客户端推送的内容。\b\b\b</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>\n  <span class="token string">"body"</span><span class="token punctuation">:</span> <span class="token string">"Clike me ..."</span><span class="token punctuation">,</span>\n  <span class="token string">"icon"</span><span class="token punctuation">:</span> <span class="token string">"images/ccard.png"</span><span class="token punctuation">,</span>\n  <span class="token string">"action"</span>\n  <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://unknown.com"</span>   <span class="token comment">// 当点击推送内容时跳转的地址</span>\n  <span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>上面对象中的属性分别对应\b\b浏览器通知栏的这些位置\n<img src="https://s2.ax1x.com/2019/04/19/E9hxGn.png" alt="E9hxGn.png"></p>\n<p>至此, 完整的一个推送流程就结束了。</p>\n<h2>策略</h2>\n<p>当实现了推送服务后我们需要让用户订阅我们的服务, 我们需要诱惑用户心理来订阅我们的服务, 当用户调用<code class="language-text">Notification.requestPermission()</code>时，如果用户点击了拒绝, 那么该浏览器除非用户手动再次设置，否则永远无法接收我们的推送，所以我们不能冒险直接调用该接口, 我们有以下三种策略来提高用户的订阅率：</p>\n<ul>\n<li>\n<p>\b纯诱导订阅: 最基本的比如做一个假的视频播放页面并且起个劲爆标题，\b\b增加用户点击视频播放按钮的欲望, 当用户点击后\b\b调用<code class="language-text">requestPermission()</code>接口弹出授权提示让用户选择点击Allow后即可观看。</p>\n</li>\n<li>\n<p>试探订阅: 先做一些假的推送框, 让用户选择是否推送，以此来判断用户接受推送的意愿，如果用户点击了假推送框的Allow, 那么我们则调用\n<code class="language-text">requestPermission()</code>, 这时用户是极大概率接着点真Allow的。如果用户不愿意，则继续用其他假的推送框试探用户。</p>\n</li>\n<li>\n<p>被动订阅：\b直接在页面中添加一个是否允许订阅的开关，如果用户觉得站点内容有价值，自然会点击允许开关，此时调用<code class="language-text">requestPermission()</code></p>\n</li>\n</ul>\n<p>原则就是不要让用户\b点拒绝, \b\b\b这样意味着这个用户将永远的失去。还要注意的是推送的内容一定要“适当“, 下面是之前做的高仿热门App的推送内容, 用户的点击率还是很高的。</p>\n<p><a href="https://imgchr.com/i/E9HsFU"><img src="https://s2.ax1x.com/2019/04/19/E9HsFU.png" alt="E9HsFU.png"></a></p>\n<h2>总结</h2>\n<p>\bChrome推送服务的商业价值是很高的, 特别是在欧美地区Chrome普及的情况下。 本文的目的是分析开篇介绍中 webpush 架构在实际开发中的应用, 让读者了解实现一个推送服务要经历哪些流程, 而不是详细的介绍SW API的详细用法, 有兴趣的读者可以\b\b查阅以下链接了解更多相关的知识：</p>\n<ul>\n<li><a href="https://serviceworke.rs/">https://serviceworke.rs/</a></li>\n<li>\b\b<a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">https://developer.mozilla.org/en-US/docs/Web/API/Service<em>Worker</em>API</a></li>\n</ul>',fields:{tagSlugs:["/tags/webpush/","/tags/java-script/"]},frontmatter:{title:"实现Chrome Web Push服务",tags:["webpush","JavaScript"],date:"2019-03-13",description:""},excerpt:"介绍\b 推送类型的广告作为一种新型的广告形式已经兴起很久了, \b通过适(欺)当(骗)的\b\b\b文案相比传统Banner广告有着不可思议的转化率。\b用户很乐意去点击感兴趣的推送而进入我们想让他进入的网站。HTTP Web Push协议中描述\bWeb…"}},pathContext:{slug:"/posts/chrome-web-push"}}}});
//# sourceMappingURL=path---posts-chrome-web-push-b69bdc9549554b98bc68.js.map