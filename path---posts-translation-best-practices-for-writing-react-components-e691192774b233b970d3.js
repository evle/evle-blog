webpackJsonp([68237591569990],{424:function(n,s){n.exports={data:{site:{siteMetadata:{title:"EVLE",subtitle:"Knowledge is not consumed, it is shared",copyright:"© All rights reserved.",author:{name:"evle",twitter:"#"},disqusShortname:"",url:"https://evle.netlify.com"}},markdownRemark:{id:"/Users/evle/blog/src/pages/articles/2019-07-22---translation-best-practices-for-writing-react-components/index.md absPath of file >>> MarkdownRemark",html:'<p>众知React应用是一种基于组件的架构模式, 复杂的UI可以通过一些小的组件组合起来, 站在软件工程的角度这样的开发方式会提高开发效率, 程序的健壮性和可维护性。</p>\n<p>但在实际组件的编写中我们通常会遇到一个问题: 复杂的组件往往具有多种职责, 并且组件之间的耦合性很高, 我们越写越复杂的组件会产生技术负债, 恐惧每一次需求的变化, 在后期维护上花费很高的时间和精力成本。</p>\n<p>那么为了解决这个问题, 我们需要思考以下2个问题:</p>\n<ul>\n<li>复杂组件如何拆分？</li>\n<li>组件之间如何通信会降低他们的耦合性或者说依赖？</li>\n</ul>\n<h2>Single responsibility 原则</h2>\n<blockquote>\n<p>A component has a single responsibility when it has one reason to change.</p>\n</blockquote>\n<p>Single responsibility principle (SRP) 要求一个组件只做一件事情, 单一任务, 良好的可测试性, 是编写复杂组件的基础。这样当我们需求变化时候, 我们也只需要修改单一的组件, 不会出现连锁反应造成的”开发信心缺失”。</p>\n<p>举个实际的例子: 获取远程数据组件, 先分析出该组件中可能变化的点</p>\n<ul>\n<li>请求地址</li>\n<li>响应的数据格式</li>\n<li>使用不同的HTTP库</li>\n<li>等等</li>\n</ul>\n<p>再举个例子: 表格组件, 拿到设计图看到设计图上有4行3列的数据, 直接写死4行3列是没有智慧的, 我们还是先要考虑可能变化的点:</p>\n<ul>\n<li>增加行列或者减少行列</li>\n<li>空的表格如何显示</li>\n<li>请求到的表格数据格式发生变化</li>\n</ul>\n<p>有些人会觉得是不是想太多? 很多时候人们通常会忽视SRP, 起初看来确实写在一起也没有糟更重要的原因是因为写的快, 因为不需要去思考组件结构和通信之类的事情, 但是在产品需求变化频繁的今天, 唯有良好的组件化设计才能保障产品迭代的速度与质量。 </p>\n<h3>实践: 拆分一个Weather组件</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">\'axios\'</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">:</span> <span class="token string">\'N/A\'</span><span class="token punctuation">,</span> windSpeed<span class="token punctuation">:</span> <span class="token string">\'N/A\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n \n   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">const</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">,</span> windSpeed <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n     <span class="token keyword">return</span> <span class="token punctuation">(</span>\n       <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"weather"</span><span class="token operator">></span>\n         <span class="token operator">&lt;</span>div<span class="token operator">></span>Temperature<span class="token punctuation">:</span> <span class="token punctuation">{</span>temperature<span class="token punctuation">}</span>°<span class="token constant">C</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n         <span class="token operator">&lt;</span>div<span class="token operator">></span>Wind<span class="token punctuation">:</span> <span class="token punctuation">{</span>windSpeed<span class="token punctuation">}</span>km<span class="token operator">/</span>h<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n     <span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n   \n   <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'http://weather.com/api\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">const</span> <span class="token punctuation">{</span> current <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span> \n       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n         temperature<span class="token punctuation">:</span> current<span class="token punctuation">.</span>temperature<span class="token punctuation">,</span>\n         windSpeed<span class="token punctuation">:</span> current<span class="token punctuation">.</span>windSpeed\n       <span class="token punctuation">}</span><span class="token punctuation">)</span>\n     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>明显这个组件的设计违反了SRP, 先让我们分析一下<code class="language-text">Weather</code>组件中有哪些会变化的点:</p>\n<ul>\n<li>网络请求部分可能会变, 比如服务器地址, 响应的数据格式</li>\n<li>UI展示的逻辑可能会变, 有可能以后要增加其他天气信息</li>\n</ul>\n<p>为了拥抱以上的变化我们可以将<code class="language-text">Weather</code>拆分成2个组件: <code class="language-text">WeatherFetch</code>和<code class="language-text">WeatherInfo</code>, 分别用来处理网络请求和UI信息的展示。</p>\n<p>拆分为的组件应该是这样的</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Weather</span>\n<span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token operator">&lt;</span>WeatherFetch <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// WeatherFetch</span>\n<span class="token keyword">class</span> <span class="token class-name">WeatherFetch</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">:</span> <span class="token string">\'N/A\'</span><span class="token punctuation">,</span> windSpeed<span class="token punctuation">:</span> <span class="token string">\'N/A\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n \n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">const</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">,</span> windSpeed <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n         <span class="token keyword">return</span> <span class="token punctuation">(</span>\n           <span class="token operator">&lt;</span>WeatherInfo temperature<span class="token operator">=</span><span class="token punctuation">{</span>temperature<span class="token punctuation">}</span> windSpeed<span class="token operator">=</span><span class="token punctuation">{</span>windSpeed<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n         <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n   \n   <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'http://weather.com/api\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">const</span> <span class="token punctuation">{</span> current <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span> \n       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n         temperature<span class="token punctuation">:</span> current<span class="token punctuation">.</span>temperature<span class="token punctuation">,</span>\n         windSpeed<span class="token punctuation">:</span> current<span class="token punctuation">.</span>windSpeed\n       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// WeatherInfo</span>\n<span class="token keyword">function</span> <span class="token function">WeatherInfo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> temperature<span class="token punctuation">,</span> windSpeed <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token punctuation">(</span>\n     <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"weather"</span><span class="token operator">></span>\n       <span class="token operator">&lt;</span>div<span class="token operator">></span>Temperature<span class="token punctuation">:</span> <span class="token punctuation">{</span>temperature<span class="token punctuation">}</span>°<span class="token constant">C</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n       <span class="token operator">&lt;</span>div<span class="token operator">></span>Wind<span class="token punctuation">:</span> <span class="token punctuation">{</span>windSpeed<span class="token punctuation">}</span> km<span class="token operator">/</span>h<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n     <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n   <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3>HOC的应用</h3>\n<blockquote>\n<p>Higher order component is a function that takes one component and returns a new component. </p>\n</blockquote>\n<p>有些时候拆分组件也不一定是万能的, 比如想给一个组件上额外添加一些参数。 这时我们可使用高阶组件(HOC)</p>\n<p>HOC最经典的使用场景是 <strong>props proxy</strong> , 即包裹一个组, 为其添加props或者修改已经存在的props, 并返回一个新组件。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">withNewFunctionality</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">NewFunctionality</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> newProp <span class="token operator">=</span> <span class="token string">\'Value\'</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> propsProxy <span class="token operator">=</span> <span class="token punctuation">{</span>\n         <span class="token operator">...</span>this<span class="token punctuation">.</span>props<span class="token punctuation">,</span>\n         <span class="token comment">// Alter existing prop:</span>\n         ownProp<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>ownProp <span class="token operator">+</span> <span class="token string">\' was modified\'</span><span class="token punctuation">,</span>\n         <span class="token comment">// Add new prop:</span>\n         newProp\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span>propsProxy<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> MyNewComponent <span class="token operator">=</span> <span class="token function">withNewFunctionality</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h4>Props proxy</h4>\n<p>写一个最基础的表单, 一个<code class="language-text">input</code>, 一个<code class="language-text">button</code></p>\n<p><img src="https://user-gold-cdn.xitu.io/2019/11/19/16e830dbcf0813d0?w=632&#x26;h=173&#x26;f=png&#x26;s=6709"></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PersistentForm</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  \n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> inputValue<span class="token punctuation">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'inputValue\'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> inputValue <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"persistent-form"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">{</span>inputValue<span class="token punctuation">}</span> \n          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span> \n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>Save to storage<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      inputValue<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">\'inputValue\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>我们现在应该能本能的感觉出上面的代码哪里有问题, 这个组件做了2件事情违反了SRP: <code class="language-text">input</code>的点击事件将用户输入的内容存储到state, <code class="language-text">button</code>的点击事件将state存储到<code class="language-text">localStorage</code>, 现在让我们拆分这两件事情。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PersistentForm</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  \n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> inputValue<span class="token punctuation">:</span> props<span class="token punctuation">.</span>initialValue <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> inputValue <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"persistent-form"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">{</span>inputValue<span class="token punctuation">}</span> \n          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span> \n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>Save to storage<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      inputValue<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">saveValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>改成这样的话我们需要一个父组件来提供存储到localStorage的功能, 这时候HOC就派上用场了, 我们通过HOC为刚才的组件添加存储到localStorage的功能。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">withPersistence</span><span class="token punctuation">(</span><span class="token parameter">storageKey<span class="token punctuation">,</span> storage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">PersistentComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> initialValue<span class="token punctuation">:</span> storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>storageKey<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">return</span> <span class="token punctuation">(</span>\n           <span class="token operator">&lt;</span>WrappedComponent\n             initialValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>initialValue<span class="token punctuation">}</span>\n             saveValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>saveValue<span class="token punctuation">}</span>\n             <span class="token punctuation">{</span><span class="token operator">...</span>this<span class="token punctuation">.</span>props<span class="token punctuation">}</span>\n           <span class="token operator">/</span><span class="token operator">></span>\n         <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token function">saveValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>storageKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>最后把他们变为一个组件, 搞定！</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">const LocalStoragePersistentForm \n  = withPersistence(&#39;key&#39;, localStorage)(PersistentForm);\n\nconst instance = &lt;LocalStoragePersistentForm /&gt;;</code></pre>\n      </div>\n<p>通过HOC添加的localStora存储功能复用起来无比的方便, 比如现在有另一个表单需要使用localStorage存储功能, 我们只需要修改传递参数即可</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> LocalStorageMyOtherForm\n  <span class="token operator">=</span> <span class="token function">withPersistence</span><span class="token punctuation">(</span><span class="token string">\'key\'</span><span class="token punctuation">,</span> localStorage<span class="token punctuation">)</span><span class="token punctuation">(</span>MyOtherForm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token operator">&lt;</span>LocalStorageMyOtherForm <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h4>Render highjacking</h4>\n<p>除了 <strong>props proxy</strong> 之外, HOC还有一个经典应用场景是 <strong>render highjacking</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">withModifiedChildren</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">ModifiedChildren</span> <span class="token keyword">extends</span> <span class="token class-name">WrappedComponent</span> <span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> rootElement <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> newChildren <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token operator">...</span>rootElement<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> \n        <span class="token comment">// Insert a new child:</span>\n        <span class="token operator">&lt;</span>div<span class="token operator">></span>New child<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n      <span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">cloneElement</span><span class="token punctuation">(</span>\n        rootElement<span class="token punctuation">,</span> \n        rootElement<span class="token punctuation">.</span>props<span class="token punctuation">,</span> \n        newChildren\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> MyNewComponent <span class="token operator">=</span> <span class="token function">withModifiedChildren</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>和 <strong>props proxy</strong> 不同的是, <strong>render highjacking</strong> 可以在不 <strong>入侵</strong> 原组件的情况下, 修改其UI渲染。 </p>\n<h2>Encapsulated 封装</h2>\n<blockquote>\n<p>An encapsulated component provides props to control its behavior while not exposing its internal structure. </p>\n</blockquote>\n<p>Coupling (耦合) 是软件工程中不得不考虑的问题之一, 如何解耦或者降低耦合也是软件开发工程师遇到的难题。</p>\n<p><img src="https://user-gold-cdn.xitu.io/2019/11/19/16e82f2c4b5b365a?w=900&#x26;h=1080&#x26;f=png&#x26;s=400432"></p>\n<p>低耦合如上图, 当你需要修改系统的一个部分时可能只会影响一小部分其他系统, 而下面这种高耦合是让开发人员对软件质量失去信心的原罪, 改一处可能瞬间爆炸。</p>\n<p><img src="https://user-gold-cdn.xitu.io/2019/11/19/16e82f4a106e7895?w=900&#x26;h=1080&#x26;f=png&#x26;s=389555"></p>\n<h3>隐藏信息</h3>\n<p>一个组件可能要操作<code class="language-text">refs</code>, 可能有<code class="language-text">state</code>, 可能使用了生命周期方法, 这些具体的实现细节其他组件是不应该知道的, 即: 组件之间需要隐藏实现细节, 这也是组件拆分的标准之一。</p>\n<h3>通信</h3>\n<p>组件拆分后, 原来直接获取的数据, 现在就要依靠通信来获取, 虽然更加繁琐, 但是在可读性和维护性上带来的好处远远大于它的复杂性的。React组件之间通信的主要手段是:props</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 使用props通信</span>\n<span class="token operator">&lt;</span>Message text<span class="token operator">=</span><span class="token string">"Hello world!"</span> modal<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 当然也可以传递复杂数据</span>\n<span class="token operator">&lt;</span>MoviesList items<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">\'Batman Begins\'</span><span class="token punctuation">,</span> <span class="token string">\'Blade Runner\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n\n<span class="token comment">// 当然也可以直接传递组件(ReactNode)</span>\n<span class="token keyword">function</span> <span class="token function">If</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> component<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> condition <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> condition <span class="token operator">?</span> <span class="token operator">&lt;</span>Component <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span>If condition<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> component<span class="token operator">=</span><span class="token punctuation">{</span>LazyComponent<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>  </code></pre>\n      </div>\n<h2>Composable 组合</h2>\n<blockquote>\n<p>A composable component is created from the composition of smaller specialized components. </p>\n</blockquote>\n<p>Medium上有一篇文章叫做 组合是React的心脏 (Composition is the heart of React), 因为它发挥了以下3个优点:</p>\n<ul>\n<li>单一责任</li>\n<li>复用性</li>\n<li>灵活性</li>\n</ul>\n<p>接下来举🌰说明</p>\n<h3>单一责任</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Application<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Header <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>Sidebar<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Menu <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Sidebar<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Content<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Article <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Content<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Application<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">app</code>这个组件中的每个组件都只负责它该负责的部分, 比如<code class="language-text">Application</code>只是一个应用的容器, <code class="language-text">&lt;Footer /&gt;</code>负责渲染页面底部的信息, 页面结构一目了然。</p>\n<h3>复用性</h3>\n<p>提取出不同组件中的相同代码是提升维护性的最佳实践, 比如</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> instance1 <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Composed1<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Piece1 <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>Common <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Composed1<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> instance2 <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Composed2<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Common <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>Piece2 <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Composed2<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3>灵活性</h3>\n<p>组合的特性可以让编写React代码时候非常灵活, 当组件组合时需要通过props进行通信, 比如 父组件可以通过<code class="language-text">children</code> prop 来接收子组件。</p>\n<p>当我们想为移动和PC展示不同的UI时我们通常会写成以下这样:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>\n        <span class="token punctuation">{</span>Utils<span class="token punctuation">.</span><span class="token function">isMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Mobile detected<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Not a mobile device<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span> \n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>At first glance, it harmeless, 但是它明显将判断是否时移动端的逻辑与组件耦合了。这不是在拼积木, 这是在”入侵”积木！</p>\n<p>让我们拆分判断逻辑与UI试图, 并且看看React如何使用 <strong>children prop</strong> 灵活的进行数据通信。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ByDevice</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">:</span> <span class="token punctuation">{</span> mobile<span class="token punctuation">,</span> other <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Utils<span class="token punctuation">.</span><span class="token function">isMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> mobile <span class="token punctuation">:</span> other<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token operator">&lt;</span>ByDevice<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n  mobile<span class="token punctuation">:</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Mobile detected<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>\n  other<span class="token punctuation">:</span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>Not a mobile device<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ByDevice<span class="token operator">></span></code></pre>\n      </div>\n<h2>Reusable 复用</h2>\n<blockquote>\n<p>A reusable component is written once but used multiple times.</p>\n</blockquote>\n<p>软件世界经常犯的错误就是 reinventing the wheel (造轮子), 比如在项目中编写了已经存在的工具或者库, React组件也是一样的, 我们要考虑代码的复用性, 尽可能的降低重复的代码和造轮子的事情发生, 是我们代码”写一次, 可以使用很多次”。 </p>\n<blockquote>\n<p>Reuse of a component actually means the reuse of its responsibility implementation. </p>\n</blockquote>\n<p>在这里可以找到很多高质量的React组件, 避免我们造轮子: <a href="https://github.com/brillout/awesome-react-components">Absolutely Awesome React Components &#x26; Libraries</a></p>\n<p>通过阅读上面这些可复用的高质量React组件的源码我们会收获到更多复用的思想以及一些API的使用技巧比如：<code class="language-text">React.cloneElement</code>等等。</p>\n<h2>Pure Component</h2>\n<p>Pure Component是从函数式编程延伸出来的概念, pure function always returns the same output for given the same input. 比如</p>\n<p>const sum= (a, b) => a + b // sum(1, 1) // => 2</p>\n<p>给相同的参数永远会得到相同的结果, 当一个函数内部使用全局变量的话那么那个函数可能会变得不那么”纯”(impure)。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> said <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">sayOnce</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>said<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  said <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> message<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">sayOnce</span><span class="token punctuation">(</span><span class="token string">\'Hello World!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => \'Hello World!\'</span>\n<span class="token function">sayOnce</span><span class="token punctuation">(</span><span class="token string">\'Hello World!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => null</span></code></pre>\n      </div>\n<p>impure函数就是给定相同的参数确有可能得到不同的结果, 那么组件也是一个道理, pure component组件会让我们对自己的组件质量充满信心, 但是不可能所有的组件我们都可以写成 pure component. 比如我们的组件里面有一个<code class="language-text">&lt;Input /&gt;</code>, 那么我们的组件不接受任何参数, 但是每次都可能产生不一样的结果。 </p>\n<p>真实世界中太多impure的事情, 比如全局状态, 可改变的全局状态害人不浅, 数据被意外改变导致意外的行为, 如果实在要使用全局状态, 那么考虑使用Redux吧。除了全局状态导致impure的东西还有很多比如网络请求, local storage等等, 那如何让我们的组件尽可能的变成pure component呢？ </p>\n<p>答案： purification</p>\n<p><img src="https://user-gold-cdn.xitu.io/2019/11/19/16e82571acc2b40a?w=900&#x26;h=1037&#x26;f=png&#x26;s=413614"></p>\n<p>下面让我们实践一下如何将impure中pure的部分过滤出来, 成为一个almost pure组件, 用前面获取天气的那个例子, 我们把网络请求这种impure的东西使用<code class="language-text">redux-saga</code>过滤出来</p>\n<p>这是之前的代码:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">WeatherFetch</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  \n   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">:</span> <span class="token string">\'N/A\'</span><span class="token punctuation">,</span> windSpeed<span class="token punctuation">:</span> <span class="token string">\'N/A\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n\n   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">const</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">,</span> windSpeed <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n     <span class="token keyword">return</span> <span class="token punctuation">(</span>\n       <span class="token operator">&lt;</span>WeatherInfo temperature<span class="token operator">=</span><span class="token punctuation">{</span>temperature<span class="token punctuation">}</span> windSpeed<span class="token operator">=</span><span class="token punctuation">{</span>windSpeed<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n     <span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n\n   <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'http://weather.com/api\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">const</span> <span class="token punctuation">{</span> current <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span> \n       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n         temperature<span class="token punctuation">:</span> current<span class="token punctuation">.</span>temperature<span class="token punctuation">,</span>\n         windSpeed<span class="token punctuation">:</span> current<span class="token punctuation">.</span>windSpeed\n       <span class="token punctuation">}</span><span class="token punctuation">)</span>\n     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>改造后</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 定义action</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'FETCH\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 定义dispatch handler</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put<span class="token punctuation">,</span> takeEvery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-saga/effects\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token function">takeEvery</span><span class="token punctuation">(</span><span class="token string">\'FETCH\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span>get<span class="token punctuation">,</span> <span class="token string">\'http://weather.com/api\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">,</span> windSpeed <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>current<span class="token punctuation">;</span>\n    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      type<span class="token punctuation">:</span> <span class="token string">\'FETCH_SUCCESS\'</span><span class="token punctuation">,</span>\n      temperature<span class="token punctuation">,</span>\n      windSpeed\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 定义reducer </span>\n<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">:</span> <span class="token string">\'N/A\'</span><span class="token punctuation">,</span> windSpeed<span class="token punctuation">:</span> <span class="token string">\'N/A\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">\'FETCH_SUCCESS\'</span><span class="token punctuation">:</span> \n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>state<span class="token punctuation">,</span>\n        temperature<span class="token punctuation">:</span> action<span class="token punctuation">.</span>temperature<span class="token punctuation">,</span>\n        windSpeed<span class="token punctuation">:</span> action<span class="token punctuation">.</span>windSpeed\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用redux连接起来</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> fetch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./action\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WeatherFetch</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">const</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">,</span> windSpeed <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n     <span class="token keyword">return</span> <span class="token punctuation">(</span>\n       <span class="token operator">&lt;</span>WeatherInfo temperature<span class="token operator">=</span><span class="token punctuation">{</span>temperature<span class="token punctuation">}</span> windSpeed<span class="token operator">=</span><span class="token punctuation">{</span>windSpeed<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n     <span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n\n   <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    temperature<span class="token punctuation">:</span> state<span class="token punctuation">.</span>temperate<span class="token punctuation">,</span>\n    windSpeed<span class="token punctuation">:</span> state<span class="token punctuation">.</span>windSpeed\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> <span class="token punctuation">{</span> fetch <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>将impure的组件改成almost pure的组件可以让我们更了解程序的行为, 也将变得更易于测试</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> assert <span class="token keyword">from</span> <span class="token string">\'assert\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> shallow<span class="token punctuation">,</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'enzyme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> spy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'sinon\'</span><span class="token punctuation">;</span>\n<span class="token comment">// Import the almost-pure version WeatherFetch</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> WeatherFetch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./WeatherFetch\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> WeatherInfo <span class="token keyword">from</span> <span class="token string">\'./WeatherInfo\'</span><span class="token punctuation">;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'&lt;WeatherFetch />\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'should render the weather info\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token function">noop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>WeatherFetch temperature<span class="token operator">=</span><span class="token string">"30"</span> windSpeed<span class="token operator">=</span><span class="token string">"10"</span> fetch<span class="token operator">=</span><span class="token punctuation">{</span>noop<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assert</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>WeatherInfo temperature<span class="token operator">=</span><span class="token string">"30"</span> windSpeed<span class="token operator">=</span><span class="token string">"10"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'should fetch weather when mounted\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> fetchSpy <span class="token operator">=</span> <span class="token function">spy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>\n     <span class="token operator">&lt;</span>WeatherFetch temperature<span class="token operator">=</span><span class="token string">"30"</span> windSpeed<span class="token operator">=</span><span class="token string">"10"</span> fetch<span class="token operator">=</span><span class="token punctuation">{</span>fetchSpy<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assert</span><span class="token punctuation">(</span>fetchSpy<span class="token punctuation">.</span>calledOnce<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>其实上面的almost pure组件仍然有优化的空间, 我们可以借助一些工具库让它成为pure component</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>  \n<span class="token keyword">import</span> <span class="token punctuation">{</span> compose<span class="token punctuation">,</span> lifecycle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'recompose\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> fetch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./action\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">WeatherFetch</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> temperature<span class="token punctuation">,</span> windSpeed <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n   <span class="token keyword">return</span> <span class="token punctuation">(</span>\n     <span class="token operator">&lt;</span>WeatherInfo temperature<span class="token operator">=</span><span class="token punctuation">{</span>temperature<span class="token punctuation">}</span> windSpeed<span class="token operator">=</span><span class="token punctuation">{</span>windSpeed<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n   <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    temperature<span class="token punctuation">:</span> state<span class="token punctuation">.</span>temperate<span class="token punctuation">,</span>\n    windSpeed<span class="token punctuation">:</span> state<span class="token punctuation">.</span>windSpeed\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">compose</span><span class="token punctuation">(</span>\n  <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> <span class="token punctuation">{</span> fetch <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">lifecycle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">(</span>WeatherFetch<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2>可测试性</h2>\n<blockquote>\n<p>A tested component is verified whether it renders the expected output for a given input.\nA testable component is easy to test.</p>\n</blockquote>\n<p>如何确保组件按照我们的期望工作, 通常我们会改下数据或者条件之类的然后在浏览器中看结果, 称之为手动验证。 这样手动验证有一些缺点:</p>\n<ol>\n<li>临时修改代码为了验证容易出错</li>\n<li>每次修改代码 每次验证很低效</li>\n</ol>\n<p>因此, 我们需要需要编写一些unit tests来帮助我们测试组件, 但是编写unit tests的前提是, 我们的组件是可测试的, 一个不可测试的组件绝对是设计不良的。</p>\n<blockquote>\n<p>A component that is untestable or hard to test is most likely badly designed. </p>\n</blockquote>\n<p>组件变得难以测试有很多因素, 比如太多的props, 高度耦合, 全局变量等等, 下面通过一个例子让我们理解如何编写可测试组件。</p>\n<p>编写一个<code class="language-text">Controls</code>组件, 目的是实现一个计数器, 点击<code class="language-text">Increase</code>则加1, 点击<code class="language-text">Decrease</code>则减1, 先来一个错误的设计</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Control parent<span class="token operator">=</span><span class="token punctuation">{</span>ConponentName<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>假设我们是这样使用的, 意图是我们传入一个父组件, 点击<code class="language-text">Control</code>的加减操作会修改父组件的state值</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> assert <span class="token keyword">from</span> <span class="token string">\'assert\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> shallow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'enzyme\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Controls</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"controls"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateNumber</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n          Increase\n        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> \n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateNumber</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n          Decrease\n        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">updateNumber</span><span class="token punctuation">(</span><span class="token parameter">toAdd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">prevState</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      number<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>number <span class="token operator">+</span> toAdd       \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Temp</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> number<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'&lt;Controls />\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'should update parent state\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Temp<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Controls parent<span class="token operator">=</span><span class="token punctuation">{</span>parent<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assert</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token string">\'number\'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">simulate</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assert</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token string">\'number\'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">simulate</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assert</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token string">\'number\'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>由于我们设计的<code class="language-text">Controls</code>组件与父组件依赖很强, 导致我们编写单元测试很复杂, 这时我们就应该思考重构这个<code class="language-text">Controls</code>提高它的可测试性了。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> assert <span class="token keyword">from</span> <span class="token string">\'assert\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> shallow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'enzyme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> spy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'sinon\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Controls</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onIncrease<span class="token punctuation">,</span> onDecrease <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"controls"</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onIncrease<span class="token punctuation">}</span><span class="token operator">></span>Increase<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> \n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onDecrease<span class="token punctuation">}</span><span class="token operator">></span>Decrease<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'&lt;Controls />\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'should execute callback on buttons click\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> increase <span class="token operator">=</span> sinon<span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> descrease <span class="token operator">=</span> sinon<span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>Controls onIncrease<span class="token operator">=</span><span class="token punctuation">{</span>increase<span class="token punctuation">}</span> onDecrease<span class="token operator">=</span><span class="token punctuation">{</span>descrease<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">simulate</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assert</span><span class="token punctuation">(</span>increase<span class="token punctuation">.</span>calledOnce<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">simulate</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assert</span><span class="token punctuation">(</span>descrease<span class="token punctuation">.</span>calledOnce<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>重构后我们的组件使用方法变为 <code class="language-text">&lt;Controls onIncrease={increase} onDecrease={descrease} /&gt;</code>, 这样的使用方式彻底解耦了<code class="language-text">Controls</code>和父组件之间的关系, 即: <code class="language-text">Controls</code>只负责按钮UI的渲染。</p>\n<h2>可读性</h2>\n<blockquote>\n<p>A meaningful component is easy to understand what it does. </p>\n</blockquote>\n<p>代码的可读性对于产品迭代的重要性是不可忽视的, obscured code不仅会让维护者头疼, 甚至我们自己也无法理解代码的意图。曾经有一个有趣的统计, 编程工作是由: 75%的读代码(理解) + 20%的修改现有代码 + 5%新代码组成的。</p>\n<p>self-explanatory code无疑是提高代码可读性最直接最好的方法</p>\n<p>举一个例子:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// &lt;Games> renders a list of games</span>\n<span class="token comment">// "data" prop contains a list of game data</span>\n<span class="token keyword">function</span> <span class="token function">Games</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// display up to 10 first games</span>\n  <span class="token keyword">const</span> data1 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Map data1 to &lt;Game> component</span>\n  <span class="token comment">// "list" has an array of &lt;Game> components</span>\n  <span class="token keyword">const</span> list <span class="token operator">=</span> data1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// "v" has game data</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Game key<span class="token operator">=</span><span class="token punctuation">{</span>v<span class="token punctuation">.</span>id<span class="token punctuation">}</span> name<span class="token operator">=</span><span class="token punctuation">{</span>v<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">{</span>list<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token operator">&lt;</span>Games \n   data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'Mario\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'Doom\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> \n<span class="token operator">/</span><span class="token operator">></span></code></pre>\n      </div>\n<p>下面让我们重构这段代码, 使它可以 <strong>self-explanatory</strong> 和 <strong>self-documenting</strong> .</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">GAMES_LIMIT</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">GamesList</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> items <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> itemsSlice <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">GAMES_LIMIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> games <span class="token operator">=</span> itemsSlice<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">gameItem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Game key<span class="token operator">=</span><span class="token punctuation">{</span>gameItem<span class="token punctuation">.</span>id<span class="token punctuation">}</span> name<span class="token operator">=</span><span class="token punctuation">{</span>gameItem<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">{</span>games<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token operator">&lt;</span>GamesList \n  items<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'Mario\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'Doom\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token operator">/</span><span class="token operator">></span></code></pre>\n      </div>\n<p>一个可读性良好的React组件应该做到: 通过读<code class="language-text">name</code>和<code class="language-text">props</code>就可以看出这段代码的意图。 </p>\n<h2>写在最后的</h2>\n<p>即使编写出了自我感觉良好的组件, 我们也该在一次一次迭代中去 Do continuous improvement, 正如作家William Zinsse说过一句话</p>\n<blockquote>\n<p>rewriting is the essence of writing. I pointed out that professional writers rewrite their sentences over and over and then rewrite what they have rewritten. </p>\n</blockquote>\n<p>重构, 编写高质量, 可扩展, 可维护的应用是每个开发人员的追求。</p>\n<p>本文参考: <a href="https://dmitripavlutin.com/7-architectural-attributes-of-a-reliable-react-component/#8-do-continuous-improvement">7 Architectural Attributes of a Reliable React Component</a></p>',
fields:{tagSlugs:["/tags//"]},frontmatter:{title:"编写React组件的最佳实践(翻译)",tags:[null],date:"2019-07-22",description:""},excerpt:"众知React应用是一种基于组件的架构模式, 复杂的UI…"}},pathContext:{slug:"/posts/translation-best-practices-for-writing-react-components"}}}});
//# sourceMappingURL=path---posts-translation-best-practices-for-writing-react-components-e691192774b233b970d3.js.map