{"version":3,"sources":["webpack:///path---posts-webpack-dev-server-source-efbd693eede52e346621.js","webpack:///./.cache/json/posts-webpack-dev-server-source.json"],"names":["webpackJsonp","427","module","exports","data","site","siteMetadata","title","subtitle","copyright","author","name","twitter","disqusShortname","url","markdownRemark","id","html","fields","tagSlugs","frontmatter","tags","date","description","excerpt","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,OAAAC,SAAA,0CAAAC,UAAA,yBAAAC,QAAmHC,KAAA,OAAAC,QAAA,KAA4BC,gBAAA,GAAAC,IAAA,6BAAwDC,gBAAmBC,GAAA,yHAAAC,KAAA;AAA2gmCC,QAA6SC,UAAA,wCAAmDC,aAAgBb,MAAA,qCAAAc,MAAA,wBAAAC,KAAA,aAAAC,YAAA,IAAkHC,QAAA,iJAA2JC,aAAgBC,KAAA","file":"path---posts-webpack-dev-server-source-efbd693eede52e346621.js","sourcesContent":["webpackJsonp([259754231509491],{\n\n/***/ 427:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"EVLE\",\"subtitle\":\"Knowledge is not consumed, it is shared\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"evle\",\"twitter\":\"#\"},\"disqusShortname\":\"\",\"url\":\"https://evle.netlify.com\"}},\"markdownRemark\":{\"id\":\"/Users/evle/blog/src/pages/articles/2019-04-13---webpack-dev-server-source/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Development Server 是我们在开发和调试中必备的工具, gulp、webpack、fis 等前端构建工具都支持这个功能。 Dev Server的核心特性之一就是live reloading, \\b正如 webpack-dev-server 官方的介绍一样</p>\\n<blockquote>\\n<p>Use webpack with a development server that provides live reloading.</p>\\n</blockquote>\\n<p>除了live reloading之外, Dev Server 还提供了很多特性来提升我们的开发效率比如Proxy和Mock服务。</p>\\n<h2>Live Reloading</h2>\\n<h3>实现</h3>\\n<p>Live reloading特性允许我们在对代码修改之后可以实时在页面上看到代码的修改结果, \\blive reloading的原理很简单: 它通过向\\b\\b\\b目标文件(例如index.html)注入通讯代码，使目标文件与 Dev Server建立连接, 当Dev Serve检测到目标文件或者目标文件依赖的文件有改动时，发送信号给目标文件让浏览器刷新\\b\\b\\b</p>\\n<p>从上边的原理我们可以轻易的想到以下实现步骤:</p>\\n<ol>\\n<li>向将被serve的目标文件\\b比如 index.html注入 websocket连接服务器的代码和接收服务器消息的代码  </li>\\n<li>监听index.html以及其依赖文件的变动, 当有变动时, 服务器(Dev Server)向客户端(index.html)发送消息</li>\\n<li>客户端(index.html)收到服务器的消息后 <code class=\\\"language-text\\\">reload()</code> 页面</li>\\n</ol>\\n<p>根据上面步骤我们可以编写简单实现如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// server.js</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">INJECTED_CODE</span> <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./injected.html'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=></span><span class=\\\"token punctuation\\\">{</span>\\n  res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'text/html'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">var</span> content <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./index.html'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token comment\\\">// 把socket通信代码注入index.html</span>\\n  <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> content<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/&lt;\\\\/body>/i</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token constant\\\">INJECTED_CODE</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> &lt;/body>`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 监听目标文件改动, 当有改动时\\b\\b向客户端发出reload消息</span>\\n<span class=\\\"token keyword\\\">const</span> chokidar <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'chokidar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nchokidar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cwd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=></span>ws<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'reload'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 等待客户端向服务器端发起连接</span>\\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'upgrade'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">request<span class=\\\"token punctuation\\\">,</span> socket<span class=\\\"token punctuation\\\">,</span> head</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  ws <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WebSocket</span><span class=\\\"token punctuation\\\">(</span>request<span class=\\\"token punctuation\\\">,</span> socket<span class=\\\"token punctuation\\\">,</span> head<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  ws<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onopen</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ws<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'live reload ready'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'listening'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> open <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'open'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> port <span class=\\\"token operator\\\">=</span> server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">address</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>port<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 启动浏览器</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://127.0.0.1:'</span> <span class=\\\"token operator\\\">+</span> port<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>注入页面的通讯代码 <code class=\\\"language-text\\\">injected.html</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text/javascript<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script\\\"><span class=\\\"token language-javascript\\\">\\n\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'WebSocket'</span> <span class=\\\"token keyword\\\">in</span> window<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> protocol <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>location<span class=\\\"token punctuation\\\">.</span>protocol <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'http:'</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'ws://'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'wss://'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> address <span class=\\\"token operator\\\">=</span> protocol <span class=\\\"token operator\\\">+</span> window<span class=\\\"token punctuation\\\">.</span>location<span class=\\\"token punctuation\\\">.</span>host <span class=\\\"token operator\\\">+</span> window<span class=\\\"token punctuation\\\">.</span>location<span class=\\\"token punctuation\\\">.</span>pathname <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/ws'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> socket <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WebSocket</span><span class=\\\"token punctuation\\\">(</span>address<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tsocket<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onmessage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">msg</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'reload'</span><span class=\\\"token punctuation\\\">)</span> window<span class=\\\"token punctuation\\\">.</span>location<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reload</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Live reload enabled.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>以上我们实现了一个最基础的 live reload 功能, 在监听本地文件变动时 webpack-dev-server 和 vs code插件 live server都使用了 <code class=\\\"language-text\\\">chokidar</code> 这个库, 启动浏览器我们使用了 <code class=\\\"language-text\\\">open</code>库.</p>\\n<h2>Proxy</h2>\\n<p>代理服务是在开发中常用的一个功能, \\b举一个例子, 当我们开发时\\b代码运行在<code class=\\\"language-text\\\">http:localhost:3000/</code>但是调用的<code class=\\\"language-text\\\">Server API</code>运行在<code class=\\\"language-text\\\">http://localhost:4000/api/</code>, 那Client的请求代码通常要这样写：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://localhost:4000/api/posts'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">rawRes</span><span class=\\\"token operator\\\">=></span>rawRes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">res</span><span class=\\\"token operator\\\">=></span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// handle res.data</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>显然把\\b请求的API地址写死是一种不好的方式, <code class=\\\"language-text\\\">https</code>还是<code class=\\\"language-text\\\">http</code>, 端口号是多少这些都是动态的, 写死的话很难管理，所以我们通常会写成：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'api/posts'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">rawRes</span><span class=\\\"token operator\\\">=></span>rawRes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">res</span><span class=\\\"token operator\\\">=></span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// handle res.data</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>这个请求就会请求当前开发服务器的地址也就是 <code class=\\\"language-text\\\">http://localhost:3000/api/posts</code>, 那么怎么让它请求<code class=\\\"language-text\\\">api/posts</code>时请求API服务器<code class=\\\"language-text\\\">http://localhost:4000/api/posts</code>呢？ 这就需要使用proxy来解决这个问题。webpack中我们需要这样设置proxy</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">devServer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n   proxy<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'/api'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'http://localhost:4000'</span><span class=\\\"token punctuation\\\">,</span>\\n            secure<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3>实现</h3>\\n<p>让我们先看下webpack是如何实现这个功能的，webpack实现proxy功能主要使用了<code class=\\\"language-text\\\">http-proxy-middleware</code> 这个中间件, 这个中间件的核心就是判断该请求是否被代理，如果需要代理则使用<code class=\\\"language-text\\\">http-proxy</code>库将请求发送\\b\\b到指定的服务器:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>proxy <span class=\\\"token operator\\\">=</span> httpProxy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createProxyServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n     <span class=\\\"token comment\\\">// 该请求是否需要被代理</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shouldProxy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>config<span class=\\\"token punctuation\\\">.</span>context<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> activeProxyOptions <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prepareProxyRequest</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token comment\\\">// 转发该请求</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>proxy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">web</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> activeProxyOptions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>接下来我们使用<code class=\\\"language-text\\\">http-proxy</code>简单实现一下之前\\b\\b\\b讨论的场景\\b将\\b对<code class=\\\"language-text\\\">http://localhost:3000/api/posts</code>的请求转发到服务器<code class=\\\"language-text\\\">http://localhost:4000/api/posts</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> httpProxy <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http-proxy'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> connect <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'connect'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nproxy <span class=\\\"token operator\\\">=</span> httpProxy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createProxyServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">var</span> proxyOptions <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\ttarget<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'http://127.0.0.1:4000'</span>\\n<span class=\\\"token punctuation\\\">}</span> \\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=></span><span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>url <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'/api/post'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\t\\tproxy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">web</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> proxyOptions<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\tres<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>那<code class=\\\"language-text\\\">http-proxy</code>这个库又是什么原理转发的请求呢？<code class=\\\"language-text\\\">http-proxy</code>\\b只是调用了Node.js API的<code class=\\\"language-text\\\">http.request</code>方法向目标服务器发送了一个请求, 其中关键实现proxying的函数是<code class=\\\"language-text\\\">stream</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"> <span class=\\\"token function-variable function\\\">stream</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">stream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token punctuation\\\">,</span> server<span class=\\\"token punctuation\\\">,</span> clb</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token operator\\\">...</span>\\n    <span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> agents<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> https <span class=\\\"token operator\\\">=</span> agents<span class=\\\"token punctuation\\\">.</span>https<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>forward<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 使用 http.request方法实现proxy</span>\\n      <span class=\\\"token keyword\\\">var</span> forwardReq <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>forward<span class=\\\"token punctuation\\\">.</span>protocol <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'https:'</span> <span class=\\\"token operator\\\">?</span> https <span class=\\\"token punctuation\\\">:</span> http<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">request</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token comment\\\">// 设置代理的 hostname, path, port, method</span>\\n        common<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setupOutgoing</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>ssl <span class=\\\"token operator\\\">||</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'forward'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token comment\\\">// error handler (e.g. ECONNRESET, ECONNREFUSED)</span>\\n      <span class=\\\"token keyword\\\">var</span> forwardError <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createErrorHandler</span><span class=\\\"token punctuation\\\">(</span>forwardReq<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">.</span>forward<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2>Mock Service</h2>\\n<p>模拟后端返回的数据进行调试是开发中必不可少的一个流程, 我们通常会使用各种各样的方式进行模拟后端返回的数据， 比如使用一些第三方Ajax库提供的拦截请求功能, 拦截指定的请求并创建一个<code class=\\\"language-text\\\">Response</code>对象模拟返回的结果。使用<code class=\\\"language-text\\\">webpack-dev-server</code>我们可以很方便的模拟后台的数据, 只要\\b\\b在中间件中判断\\b<code class=\\\"language-text\\\">req.url</code>并回应相应的数据\\b\\b, 为了方便我们使用express创建一个基于 webpack 的mock服务。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> webpack <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'webpack'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> middleware <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'webpack-dev-middleware'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> webpackOptions <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./webpack.config.js'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nwebpackOptions<span class=\\\"token punctuation\\\">.</span>mode <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'development'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> compiler <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">webpack</span><span class=\\\"token punctuation\\\">(</span>webpackOptions<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'express'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=></span><span class=\\\"token punctuation\\\">{</span>\\n\\tres<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./index.html'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">middleware</span><span class=\\\"token punctuation\\\">(</span>compiler<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/fruits'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\tres<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> text<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'apple'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> text<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'orange'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> text<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'mangosteen'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App listening on port 3000!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>当我们用户访问<code class=\\\"language-text\\\">http://127.0.0.1:3000</code>的时候我们会返回给用户<code class=\\\"language-text\\\">index.html</code>文件, \\b\\b\\b\\b<code class=\\\"language-text\\\">index.html</code> 文件中请求了<code class=\\\"language-text\\\">/api/fruits</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script\\\"><span class=\\\"token language-javascript\\\">\\n    <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'api'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">res</span><span class=\\\"token operator\\\">=></span>res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">res</span><span class=\\\"token operator\\\">=></span>console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// output: [{id:1, text:'apple'},{id:2, text:'orange'},{id:3, text:'mangosteen'}]</span>\\n  </span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>从上面实现Mock功能\\b我们可以看到搭建一个Mock服务很简单, 原理就是写一个 Koa 或者 Express服务返回模拟的数据, 但是像这样配置路由有点繁琐, 我们可以更便捷的模拟后端的数据通过<code class=\\\"language-text\\\">json-server</code>, 可以完全通过配置文件或控制面板让测试人员\\b随便修改后端返回的数据。</p>\",\"fields\":{\"tagSlugs\":[\"/tags/webpack/\",\"/tags/java-script/\"]},\"frontmatter\":{\"title\":\"从webpack-dev-server看Dev Server功能设计\",\"tags\":[\"Webpack\",\"JavaScript\"],\"date\":\"2019-04-13\",\"description\":\"\"},\"excerpt\":\"Development Server 是我们在开发和调试中必备的工具, gulp、webpack、fis 等前端构建工具都支持这个功能。 Dev Server的核心特性之一就是live reloading, \\b正如 webpack-dev-server 官方的介绍一样 Use…\"}},\"pathContext\":{\"slug\":\"/posts/webpack-dev-server-source\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-webpack-dev-server-source-efbd693eede52e346621.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"EVLE\",\"subtitle\":\"Knowledge is not consumed, it is shared\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"evle\",\"twitter\":\"#\"},\"disqusShortname\":\"\",\"url\":\"https://evle.netlify.com\"}},\"markdownRemark\":{\"id\":\"/Users/evle/blog/src/pages/articles/2019-04-13---webpack-dev-server-source/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Development Server 是我们在开发和调试中必备的工具, gulp、webpack、fis 等前端构建工具都支持这个功能。 Dev Server的核心特性之一就是live reloading, \\b正如 webpack-dev-server 官方的介绍一样</p>\\n<blockquote>\\n<p>Use webpack with a development server that provides live reloading.</p>\\n</blockquote>\\n<p>除了live reloading之外, Dev Server 还提供了很多特性来提升我们的开发效率比如Proxy和Mock服务。</p>\\n<h2>Live Reloading</h2>\\n<h3>实现</h3>\\n<p>Live reloading特性允许我们在对代码修改之后可以实时在页面上看到代码的修改结果, \\blive reloading的原理很简单: 它通过向\\b\\b\\b目标文件(例如index.html)注入通讯代码，使目标文件与 Dev Server建立连接, 当Dev Serve检测到目标文件或者目标文件依赖的文件有改动时，发送信号给目标文件让浏览器刷新\\b\\b\\b</p>\\n<p>从上边的原理我们可以轻易的想到以下实现步骤:</p>\\n<ol>\\n<li>向将被serve的目标文件\\b比如 index.html注入 websocket连接服务器的代码和接收服务器消息的代码  </li>\\n<li>监听index.html以及其依赖文件的变动, 当有变动时, 服务器(Dev Server)向客户端(index.html)发送消息</li>\\n<li>客户端(index.html)收到服务器的消息后 <code class=\\\"language-text\\\">reload()</code> 页面</li>\\n</ol>\\n<p>根据上面步骤我们可以编写简单实现如下</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// server.js</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">INJECTED_CODE</span> <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./injected.html'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> server <span class=\\\"token operator\\\">=</span> http<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=></span><span class=\\\"token punctuation\\\">{</span>\\n  res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeHead</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'Content-Type'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'text/html'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">var</span> content <span class=\\\"token operator\\\">=</span> fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./index.html'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token comment\\\">// 把socket通信代码注入index.html</span>\\n  <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> content<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/&lt;\\\\/body>/i</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token constant\\\">INJECTED_CODE</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> &lt;/body>`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// 监听目标文件改动, 当有改动时\\b\\b向客户端发出reload消息</span>\\n<span class=\\\"token keyword\\\">const</span> chokidar <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'chokidar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nchokidar<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">watch</span><span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cwd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'change'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=></span>ws<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'reload'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 等待客户端向服务器端发起连接</span>\\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'upgrade'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">request<span class=\\\"token punctuation\\\">,</span> socket<span class=\\\"token punctuation\\\">,</span> head</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  ws <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WebSocket</span><span class=\\\"token punctuation\\\">(</span>request<span class=\\\"token punctuation\\\">,</span> socket<span class=\\\"token punctuation\\\">,</span> head<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  ws<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onopen</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    ws<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'live reload ready'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'listening'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> open <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'open'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> port <span class=\\\"token operator\\\">=</span> server<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">address</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>port<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 启动浏览器</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://127.0.0.1:'</span> <span class=\\\"token operator\\\">+</span> port<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\nserver<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>注入页面的通讯代码 <code class=\\\"language-text\\\">injected.html</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text/javascript<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script\\\"><span class=\\\"token language-javascript\\\">\\n\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'WebSocket'</span> <span class=\\\"token keyword\\\">in</span> window<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> protocol <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>location<span class=\\\"token punctuation\\\">.</span>protocol <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'http:'</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'ws://'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'wss://'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> address <span class=\\\"token operator\\\">=</span> protocol <span class=\\\"token operator\\\">+</span> window<span class=\\\"token punctuation\\\">.</span>location<span class=\\\"token punctuation\\\">.</span>host <span class=\\\"token operator\\\">+</span> window<span class=\\\"token punctuation\\\">.</span>location<span class=\\\"token punctuation\\\">.</span>pathname <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'/ws'</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token keyword\\\">var</span> socket <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">WebSocket</span><span class=\\\"token punctuation\\\">(</span>address<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tsocket<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onmessage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">msg</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t\\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'reload'</span><span class=\\\"token punctuation\\\">)</span> window<span class=\\\"token punctuation\\\">.</span>location<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reload</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\t<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\t\\tconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Live reload enabled.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n</span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>以上我们实现了一个最基础的 live reload 功能, 在监听本地文件变动时 webpack-dev-server 和 vs code插件 live server都使用了 <code class=\\\"language-text\\\">chokidar</code> 这个库, 启动浏览器我们使用了 <code class=\\\"language-text\\\">open</code>库.</p>\\n<h2>Proxy</h2>\\n<p>代理服务是在开发中常用的一个功能, \\b举一个例子, 当我们开发时\\b代码运行在<code class=\\\"language-text\\\">http:localhost:3000/</code>但是调用的<code class=\\\"language-text\\\">Server API</code>运行在<code class=\\\"language-text\\\">http://localhost:4000/api/</code>, 那Client的请求代码通常要这样写：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://localhost:4000/api/posts'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">rawRes</span><span class=\\\"token operator\\\">=></span>rawRes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">res</span><span class=\\\"token operator\\\">=></span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// handle res.data</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>显然把\\b请求的API地址写死是一种不好的方式, <code class=\\\"language-text\\\">https</code>还是<code class=\\\"language-text\\\">http</code>, 端口号是多少这些都是动态的, 写死的话很难管理，所以我们通常会写成：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'api/posts'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">rawRes</span><span class=\\\"token operator\\\">=></span>rawRes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">res</span><span class=\\\"token operator\\\">=></span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// handle res.data</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>这个请求就会请求当前开发服务器的地址也就是 <code class=\\\"language-text\\\">http://localhost:3000/api/posts</code>, 那么怎么让它请求<code class=\\\"language-text\\\">api/posts</code>时请求API服务器<code class=\\\"language-text\\\">http://localhost:4000/api/posts</code>呢？ 这就需要使用proxy来解决这个问题。webpack中我们需要这样设置proxy</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">devServer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n   proxy<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'/api'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n            target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'http://localhost:4000'</span><span class=\\\"token punctuation\\\">,</span>\\n            secure<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3>实现</h3>\\n<p>让我们先看下webpack是如何实现这个功能的，webpack实现proxy功能主要使用了<code class=\\\"language-text\\\">http-proxy-middleware</code> 这个中间件, 这个中间件的核心就是判断该请求是否被代理，如果需要代理则使用<code class=\\\"language-text\\\">http-proxy</code>库将请求发送\\b\\b到指定的服务器:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>proxy <span class=\\\"token operator\\\">=</span> httpProxy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createProxyServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n <span class=\\\"token keyword\\\">async</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n     <span class=\\\"token comment\\\">// 该请求是否需要被代理</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shouldProxy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>config<span class=\\\"token punctuation\\\">.</span>context<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> activeProxyOptions <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">prepareProxyRequest</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token comment\\\">// 转发该请求</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>proxy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">web</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> activeProxyOptions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>接下来我们使用<code class=\\\"language-text\\\">http-proxy</code>简单实现一下之前\\b\\b\\b讨论的场景\\b将\\b对<code class=\\\"language-text\\\">http://localhost:3000/api/posts</code>的请求转发到服务器<code class=\\\"language-text\\\">http://localhost:4000/api/posts</code>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> httpProxy <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http-proxy'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> connect <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'connect'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nproxy <span class=\\\"token operator\\\">=</span> httpProxy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createProxyServer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">var</span> proxyOptions <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\ttarget<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'http://127.0.0.1:4000'</span>\\n<span class=\\\"token punctuation\\\">}</span> \\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> next</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=></span><span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">.</span>url <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'/api/post'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\t\\tproxy<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">web</span><span class=\\\"token punctuation\\\">(</span>req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> proxyOptions<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\tres<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>那<code class=\\\"language-text\\\">http-proxy</code>这个库又是什么原理转发的请求呢？<code class=\\\"language-text\\\">http-proxy</code>\\b只是调用了Node.js API的<code class=\\\"language-text\\\">http.request</code>方法向目标服务器发送了一个请求, 其中关键实现proxying的函数是<code class=\\\"language-text\\\">stream</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"> <span class=\\\"token function-variable function\\\">stream</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">stream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token punctuation\\\">,</span> server<span class=\\\"token punctuation\\\">,</span> clb</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token operator\\\">...</span>\\n    <span class=\\\"token keyword\\\">var</span> http <span class=\\\"token operator\\\">=</span> agents<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> https <span class=\\\"token operator\\\">=</span> agents<span class=\\\"token punctuation\\\">.</span>https<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>forward<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 使用 http.request方法实现proxy</span>\\n      <span class=\\\"token keyword\\\">var</span> forwardReq <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>forward<span class=\\\"token punctuation\\\">.</span>protocol <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'https:'</span> <span class=\\\"token operator\\\">?</span> https <span class=\\\"token punctuation\\\">:</span> http<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">request</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token comment\\\">// 设置代理的 hostname, path, port, method</span>\\n        common<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setupOutgoing</span><span class=\\\"token punctuation\\\">(</span>options<span class=\\\"token punctuation\\\">.</span>ssl <span class=\\\"token operator\\\">||</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">,</span> req<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'forward'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token comment\\\">// error handler (e.g. ECONNRESET, ECONNREFUSED)</span>\\n      <span class=\\\"token keyword\\\">var</span> forwardError <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createErrorHandler</span><span class=\\\"token punctuation\\\">(</span>forwardReq<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">.</span>forward<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2>Mock Service</h2>\\n<p>模拟后端返回的数据进行调试是开发中必不可少的一个流程, 我们通常会使用各种各样的方式进行模拟后端返回的数据， 比如使用一些第三方Ajax库提供的拦截请求功能, 拦截指定的请求并创建一个<code class=\\\"language-text\\\">Response</code>对象模拟返回的结果。使用<code class=\\\"language-text\\\">webpack-dev-server</code>我们可以很方便的模拟后台的数据, 只要\\b\\b在中间件中判断\\b<code class=\\\"language-text\\\">req.url</code>并回应相应的数据\\b\\b, 为了方便我们使用express创建一个基于 webpack 的mock服务。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> webpack <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'webpack'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> middleware <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'webpack-dev-middleware'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> webpackOptions <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./webpack.config.js'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nwebpackOptions<span class=\\\"token punctuation\\\">.</span>mode <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'development'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> compiler <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">webpack</span><span class=\\\"token punctuation\\\">(</span>webpackOptions<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> express <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'express'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> app <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">express</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=></span><span class=\\\"token punctuation\\\">{</span>\\n\\tres<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span>fs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">readFileSync</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./index.html'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">middleware</span><span class=\\\"token punctuation\\\">(</span>compiler<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/fruits'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">req<span class=\\\"token punctuation\\\">,</span> res</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n\\tres<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> text<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'apple'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> text<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'orange'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t<span class=\\\"token punctuation\\\">{</span>id<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> text<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'mangosteen'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\napp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3000</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'App listening on port 3000!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>当我们用户访问<code class=\\\"language-text\\\">http://127.0.0.1:3000</code>的时候我们会返回给用户<code class=\\\"language-text\\\">index.html</code>文件, \\b\\b\\b\\b<code class=\\\"language-text\\\">index.html</code> 文件中请求了<code class=\\\"language-text\\\">/api/fruits</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">\\t<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>script</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token script\\\"><span class=\\\"token language-javascript\\\">\\n    <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'api'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">res</span><span class=\\\"token operator\\\">=></span>res<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">res</span><span class=\\\"token operator\\\">=></span>console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// output: [{id:1, text:'apple'},{id:2, text:'orange'},{id:3, text:'mangosteen'}]</span>\\n  </span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>从上面实现Mock功能\\b我们可以看到搭建一个Mock服务很简单, 原理就是写一个 Koa 或者 Express服务返回模拟的数据, 但是像这样配置路由有点繁琐, 我们可以更便捷的模拟后端的数据通过<code class=\\\"language-text\\\">json-server</code>, 可以完全通过配置文件或控制面板让测试人员\\b随便修改后端返回的数据。</p>\",\"fields\":{\"tagSlugs\":[\"/tags/webpack/\",\"/tags/java-script/\"]},\"frontmatter\":{\"title\":\"从webpack-dev-server看Dev Server功能设计\",\"tags\":[\"Webpack\",\"JavaScript\"],\"date\":\"2019-04-13\",\"description\":\"\"},\"excerpt\":\"Development Server 是我们在开发和调试中必备的工具, gulp、webpack、fis 等前端构建工具都支持这个功能。 Dev Server的核心特性之一就是live reloading, \\b正如 webpack-dev-server 官方的介绍一样 Use…\"}},\"pathContext\":{\"slug\":\"/posts/webpack-dev-server-source\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-webpack-dev-server-source.json\n// module id = 427\n// module chunks = 259754231509491"],"sourceRoot":""}